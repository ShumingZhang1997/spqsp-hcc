#pragma once

#include "SP_QSP_shared/ABM_Base/ParamBase.h"

#include <string>

namespace SP_QSP_IO{
namespace SP_QSP_HCC{

//! enumerator for double type parameters 
enum ParamFloat{
	// QSP
	PARAM_WEIGHT_QSP,
	PARAM_QSP_STEADYSTATE,
	PARAM_QSP_T_RESECTION,
	PARAM_QSP_PRE_SIMULATION_DIAM_FRAC,
	// ENV
	PARAM_SEC_PER_TIME_SLICE,
	PARAM_REC_SITE_FACTOR,
	PARAM_ADH_SITE_DENSITY,
	// PHARM
	PARAM_NIVO_DOSE_INTERVAL_TIME,
	PARAM_NIVO_DOSE,
	PARAM_IPI_DOSE_INTERVAL_TIME,
	PARAM_IPI_DOSE,
	PARAM_CABO_DOSE_INTERVAL_TIME,
	PARAM_CABO_DOSE,
	// T cell
	PARAM_T_CELL_LIFE_SD,
	PARAM_T_CELL_MOVE_PROB,
	PARAM_IL_2_RELEASE_TIME,
	PARAM_IL_2_PROLIF_TH,
	PARAM_TEFF_TGFB_EC50,
	PARAM_TEFF_IFN_EC50,
	// TCD4
	PARAM_TCD4_MOVE_PROB,
	PARAM_K_TH_TREG,
	PARAM_TH_FRAC,
	PARAM_TGFB_RELEASE_TIME,
	// MDSC
	PARAM_MDSC_LIFE_MEAN,
	PARAM_MDSC_LIFE_SD,
	PARAM_MDSC_MOVE_PROB,
	PARAM_MDSC_K_REC,
	PARAM_MDSC_EC50_CCL2_REC,
	PARAM_MDSC_IC50_ArgI_CTL,
	PARAM_MDSC_EC50_ArgI_Treg,
	PARAM_MDSC_IC50_NO_CTL,
	PARAM_MDSC_MYELOID_SCALE,
	//Mac
	PARAM_MAC_LIFE_MEAN,
	PARAM_MAC_LIFE_SD,
	PARAM_MAC_RECRUIT_BY_CCL2_K,
	PARAM_MAC_MOVE_PROB,
	PARAM_MAC_PD1_TOTAL,
	PARAM_MAC_AREA,
	PARAM_MAC_AREA_SYN,
	PARAM_MAC_M2_POL,
	PARAM_MAC_M1_POL,
	PARAM_MAC_K_M1_PHAGO,
	PARAM_MAC_TGFB_EC50,
	PARAM_MAC_IL_10_EC50,
	PARAM_MAC_IL_10_HALF_PHAGO,
	PARAM_MAC_IFN_G_EC50,
	PARAM_MAC_IL_12_EC50,
	PARAM_MAC_SIRPa,
	PARAM_MAC_SIRPa_HALF,
	PARAM_KON_SIRPa_CD47,
	PARAM_KOFF_SIRPa_CD47,
	PARAM_N_SIRPa_CD47,
	// Cancer cell
	PARAM_CANCER_STEM_ASYMMETRIC_DIV_PROB,
	PARAM_CANCER_PROG_GROWTH_RATE,
	PARAM_CANCER_SENESCENT_DEATH_RATE,
	PARAM_CANCER_CELL_MOVE_PROB,
	PARAM_CANCER_STEM_MOVE_PROB,
	PARAM_ABM_KILL_SCALE,
	PARAM_C1_MIN,
	PARAM_C1_CD47,
	PARAM_CANCER_IFN_G_UPTAKE,
	PARAM_CANCER_HYPOXIA_TH,
	PARAM_DENSITY_CSC,
	//Vas
	PARAM_VAS_MAX_PER_VOXEL,
	PARAM_VAS_50,
	PARAM_VAS_O2_CONC,
	PARAM_VAS_RC,
	PARAM_VAS_SIGMA,
	PARAM_VAS_REF_FRAC,
	// Agent cytokine 
	PARAM_PDL1_HIGH_TH,
	PARAM_IFN_G_PDL1_HALF,
	PARAM_IFN_G_PDL1_N,
	// diffusion grid
	PARAM_IFN_G_DIFFUSIVITY,
	PARAM_IFN_G_RELEASE,
	PARAM_IFN_G_DECAY_RATE,
	PARAM_IL_2_DIFFUSIVITY,
	PARAM_IL_2_RELEASE,
	PARAM_IL_2_UPTAKE,
	PARAM_IL_2_DECAY_RATE,
	PARAM_CCL2_DIFFUSIVITY,
	PARAM_CCL2_RELEASE,
	PARAM_CCL2_UPTAKE,
	PARAM_CCL2_DECAY_RATE,	
	PARAM_CCL2_MOLECULAR_WEIGHT,
	PARAM_ARGI_DIFFUSIVITY,
	PARAM_ARGI_RELEASE,
	PARAM_ARGI_DECAY_RATE,
	PARAM_ARGI_MOLECULAR_WEIGHT,
	PARAM_NO_DIFFUSIVITY,
	PARAM_NO_RELEASE,
	PARAM_NO_DECAY_RATE,
	PARAM_NO_MOLECULAR_WEIGHT,
	PARAM_TGFB_DIFFUSIVITY,
	PARAM_MAC_TGFB_RELEASE,
	PARAM_TREG_TGFB_RELEASE,
	PARAM_CANCER_TGFB_RELEASE,
	PARAM_TGFB_DECAY_RATE,
	PARAM_TGFB_MOLECULAR_WEIGHT,
	PARAM_IL_10_DIFFUSIVITY,
	PARAM_TREG_IL_10_RELEASE,
	PARAM_MAC_IL_10_RELEASE,
	PARAM_IL_10_DECAY_RATE,
	PARAM_IL_10_MOLECULAR_WEIGHT,
	PARAM_IL_12_DIFFUSIVITY,
	PARAM_IL_12_RELEASE,
	PARAM_IL_12_DECAY_RATE,
	PARAM_IL_12_MOLECULAR_WEIGHT,
	PARAM_VEGFA_DIFFUSIVITY,
	PARAM_MAC_VEGFA_RELEASE,
	PARAM_CANCER_STEM_VEGFA_RELEASE,
	PARAM_CANCER_PRO_VEGFA_RELEASE,
	PARAM_VEGFA_UPTAKE,
	PARAM_VEGFA_DECAY_RATE,
	PARAM_VEGFA_MOLECULAR_WEIGHT,
	PARAM_O2_DIFFUSIVITY,
	PARAM_O2_UPTAKE,
	PARAM_O2_DECAY_RATE,
	PARAM_O2_MOLECULAR_WEIGHT,
	// dummy
	PARAM_FLOAT_COUNT // dummy for count
};

//! enumerator for int type parameters 
enum ParamInt{
	PARAM_TUMOR_X,
	PARAM_TUMOR_Y,
	PARAM_TUMOR_Z,
	PARAM_VOXEL_SIZE,
	PARAM_N_T_VOXEL,
	PARAM_N_T_VOXEL_C,
	PARAM_STEM_MODE,
	PARAM_SHUFFLE_CELL_VEC_INTERVAL,
	PARAM_SHIFTGRID_INTERVAL,
	PARAM_T_DIV_INTERVAL,
	PARAM_T_DIV_LIMIT,
	PARAM_TCD4_DIV_INTERVAL,
	PARAM_TCD4_DIV_LIMIT,		
	PARAM_CANCER_CELL_PROGENITOR_DIV_MAX,
	// lymphatic compartment
	// molecular
	PARAM_MOLECULAR_STEP_PER_SLICE,
	// dummy
	PARAM_INT_COUNT // dummy for count
};

//! enumerator for boolean type parameters 
enum ParamBool{
	PARAM_QSP_RESECTION,
	PARAM_ALL_MOLECULAR_OFF,
	PARAM_DIFFUSION_OFF,
	PARAM_ALL_CELL_ODE_OFF,
	PARAM_NIVO_ON,
	PARAM_IPI_ON,
	PARAM_ENT_ON,
	PARAM_CABO_ON,
	PARAM_BOOL_COUNT
};

//! parameters not directly from paramter file (float type, place holder)
enum ParamFloatInternal {
	PARAM_VOXEL_SIZE_CM,
	PARAM_CANCER_SENESCENT_MEAN_LIFE,
	PARAM_T_CELL_LIFE_MEAN_SLICE,
	PARAM_T_CELL_LIFE_SD_SLICE,
	// parameters calculated from QSP param
	PARAM_AVOGADROS,
	PARAM_CELL,
	PARAM_VT_MIN,
	PARAM_V_CELL,
	PARAM_V_TCELL,
	PARAM_A_TCELL,
	PARAM_INIT_TUM_VOL,
	PARAM_INIT_TUM_DIAM,
	PARAM_TREGMAX,
	PARAM_MDSCMAX,
	PARAM_K_BASE_REC,
	PARAM_K_REC_BY_CCL2,	
	PARAM_EC50_CCL2_REC,
	PARAM_IC50_NO_CTL,
	PARAM_IC50_ARGI_CTL,
	PARAM_EC50_ARGI_TREG,	
	PARAM_IC50_ENT_C,	
	PARAM_IC50_ENT_CCL2,	
	PARAM_IC50_ENT_NO,
	PARAM_IC50_ENT_ARGI,
	PARAM_PD1_PDL1_HALF,
	PARAM_PD1_SYN,
	PARAM_MAC_PD1_SYN,
	PARAM_MAC_SIRPa_SYN, 
	PARAM_C1_CD47_SYN,
	PARAM_A_SYN,
	PARAM_PDL1_SYN_MAX,
	PARAM_PDL1_CELL,
	PARAM_PDL1_K1,
	PARAM_PDL1_K2,
	PARAM_PDL1_K3,
	PARAM_N_PD1_PDL1,
	PARAM_KON_CTLA4_IPI,
	PARAM_KOFF_CTLA4_IPI,
	PARAM_GAMMA_T_IPI,
	PARAM_CHI_CTLA4_IPI,
	PARAM_TREG_CTLA4_50,
	PARAM_CTLA4_TREG,
	PARAM_K_ADCC,
	PARAM_ESCAPE_BASE,
	PARAM_ESCAPE_MAC_BASE,
	PARAM_EXHUAST_BASE_PDL1,
	PARAM_EXHUAST_BASE_TREG,
	PARAM_RESECT_TIME_STEP,
	PARAM_REC_PORT,
	PARAM_TEFF_RECRUIT_K,
	PARAM_TCD4_RECRUIT_K,
	PARAM_MDSC_RECRUIT_K,
	PARAM_MDSC_RECRUIT_BY_CCL2_K,
	PARAM_APC_RECRUIT_K,
	PARAM_TUM_MAX_C,
	PARAM_TCD4_LIFE_MEAN,
	PARAM_APC_LIFE_MEAN,
	PARAM_CKINE_50,
	PARAM_K_APC_MAT,
	PARAM_APC0_T,
	PARAM_APC_TRANSMIG,
	PARAM_T0_CLONE,
	PARAM_T1_CLONE,
	PARAM_ANTIGEN_PER_CELL,
	PARAM_ANTIGEN_UP,
	PARAM_K_xP_DEG,
	PARAM_IC50_AXL,
	PARAM_IC50_VEGFR2,
	PARAM_IC50_MET,
	PARAM_IC50_RET,
	PARAM_LAMBDA_C_CABO,
	PARAM_LAMBDA_V_CABO,
	PARAM_LAMBDA_Q_CABO,
	PARAM_CSC_GROWTH_RATE,
	PARAM_FLOAT_CANCER_CELL_PROGENITOR_DIV_INTERVAL_SLICE,
	PARAM_FLOAT_CANCER_CELL_STEM_DIV_INTERVAL_SLICE,
	PARAM_FLOAT_INTERNAL_COUNT
};

//! parameters not directly from paramter file (int type, place holder)
enum ParamIntInternal{
	PARAM_INT_INTERNAL_COUNT
};

//! parameters not directly from paramter file (boolean type)
enum ParamBoolInternal{
	PARAM_MOLECULAR_MODULES_ON,
	PARAM_DIFFUSION_ON,
	PARAM_CELL_ODE_ON,
	PARAM_T_CELL_ODE_ON,
	PARAM_CANCER_CELL_ODE_ON,
	PARAM_BOOL_INTERNAL_COUNT
};
//! Model prameters
class Param: public ParamBase
{
public:
	Param();
	~Param(){};
	//! get parameter value (float)
	inline double getVal(ParamFloat n) const { return _paramFloat[n];};
	//! get parameter value (int)
	inline int getVal(ParamInt n) const { return _paramInt[n]; };
	//! get parameter value (bool)
	inline bool getVal(ParamBool n) const { return _paramBool[n]; };

	inline double getVal(ParamFloatInternal n) const { return _paramFloatInternal[n];};
	inline int getVal(ParamIntInternal n) const { return _paramIntInternal[n]; };
	inline bool getVal(ParamBoolInternal n) const { return _paramBoolInternal[n]; };

	//! update from QSP parameters
	void update_from_qsp(void);

private:

	//! setup content of _paramDesc
	virtual void setupParam();
	//! process all internal parameters
	virtual void processInternalParams();
};

};
};

